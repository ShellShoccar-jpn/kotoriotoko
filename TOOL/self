#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} <f1> <f2> ... <file>
	        : ${0##*/} -d <f1> <f2> ... <string>
	Version : Thu Jun 25 05:07:47 JST 2015
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands/UTF-8)
__USAGE
  exit 1
}

# initialize
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
directmode=0
directstr=''
awkprstr=''
file=''

# parse the arguments
case $# in 0) print_usage_and_exit;; esac
i=0
dlm=''
for arg in "$@"; do
  i=$((i+1))
  # direct mode processing
  if [ \( $i -eq 1 \) -a \( "_$arg" = "_-d" \) ]; then
    directmode=1
    continue
  elif [ \( $i -eq $# \) -a \( $directmode -ne 0 \) ]; then
    directstr=$arg
    arg=''
    break
  fi
  # "/" extraction mode (make arg2 if this mode)
  arg1=${arg%%/*}
  arg2=${arg##*/}
  if [ \( "_${arg1}/${arg2}" = "_$arg"   \) -a \
       \( -n "$arg1" \) -a \( -n "$arg2" \)    ]
  then
    if printf '%s\n' "$arg2" | grep -Eq '^(NF|(NF-)?[0-9]+)$'; then
      :
    else
      break
    fi
  else
    arg2=''
  fi
  # get substr parameters from arg1 if possible
  stpos=0
  edpos=-1
  arg1s=${arg1#*.}
  arg1=${arg1%%.*}
  if [ "_$arg1s" != "_$arg1" ]; then
    if printf '%s\n' "$arg1s" | grep -q '^[0-9]\{1,\}$'; then
      stpos=$arg1s
      if [ $stpos -eq 0 ]; then
        break
      fi
    elif printf '%s\n' "$arg1s" | grep -q '^[0-9]\{1,\}\.[0-9]\{1,\}$'; then
      stpos=${arg1s%.*}
      edpos=${arg1s#*.}
      if [ $stpos -eq 0 ]; then
        break
      fi
    else
      break
    fi
  fi
  # judge the field number type of arg1 (also arg2 if possible)
  if printf '%s\n' "$arg1" | grep -q '^[0-9]\{1,\}$'; then
    arg1type=1
  elif printf '%s\n' "$arg1" | grep -Eq '^(NF|NF-[0-9]+)$'; then
    arg1type=2
  else
    arg1type=-1
  fi
  if [ -z "$arg2" ]; then
    arg2type=0
  elif printf '%s\n' "$arg2" | grep -q '^[0-9]\{1,\}$'; then
    arg2type=1
  elif printf '%s\n' "$arg2" | grep -Eq '^(NF|NF-[0-9]+)$'; then
    arg2type=2
  else
    arg2type=-1
  fi
  if [ \( $arg1type -lt 0 \) -o \( $arg2type -lt 0 \) ]; then
    break
  fi
  # generate the string for the AWK-print
  if [ $arg2type -eq 0 ]; then
    if [ $stpos -eq 0 ]; then
      if [ $arg1type -eq 1 ]; then
        awkprstr="$awkprstr$dlm\$$arg1"
      else
        awkprstr="$awkprstr$dlm\$($arg1)"
      fi
    else
      if [ $arg1type -eq 1 ]; then
        awkprstr="$awkprstr${dlm}getsubf(\$$arg1,$stpos,$edpos)"
      else
        awkprstr="$awkprstr${dlm}getsubf(\$($arg1),$stpos,$edpos)"
      fi
    fi
  else
    if [ \( $arg1type -eq 1 \) -a \( $arg2type -eq 1 \) ]; then
      if [ \( $stpos -eq 0 \) -a \( $arg1 -le $arg2 \) ]; then
        j=$arg1
        while [ $j -le $arg2 ]; do
          awkprstr="$awkprstr${dlm}\$$j"
          dlm=','
          j=$((j+1))
        done
      elif [ \( $stpos -eq 0 \) -a \( $arg1 -ge $arg2 \) ]; then
        j=$arg1
        while [ $j -ge $arg2 ]; do
          awkprstr="$awkprstr${dlm}\$$j"
          dlm=','
          j=$((j-1))
        done
      elif [ \( $stpos -ne 0 \) -a \( $arg1 -le $arg2 \) ]; then
        j=$arg1
        while [ $j -le $arg2 ]; do
          awkprstr="$awkprstr${dlm}getsubf(\$$j,$stpos,$edpos)"
          dlm=','
          j=$((j+1))
        done
      elif [ \( $stpos -ne 0 \) -a \( $arg1 -ge $arg2 \) ]; then
        j=$arg1
        while [ $j -ge $arg2 ]; do
          awkprstr="$awkprstr${dlm}getsubf(\$$j,$stpos,$edpos)"
          dlm=','
          j=$((j-1))
        done
      fi
    elif [ \( $arg1type -eq 2 \) -a \( $arg2type -eq 2 \) ]; then
      [ "_$arg1" = '_NF' ] && arg1='NF-0'
      [ "_$arg2" = '_NF' ] && arg2='NF-0'
      arg1=${arg1#NF-}
      arg2=${arg2#NF-}
      if [ \( $stpos -eq 0 \) -a \( $arg1 -le $arg2 \) ]; then
        j=$arg1
        while [ $j -le $arg2 ]; do
          if [ $j -eq 0 ]; then
            awkprstr="$awkprstr${dlm}\$(NF)"
          else
            awkprstr="$awkprstr${dlm}\$(NF-$j)"
          fi
          dlm=','
          j=$((j+1))
        done
      elif [ \( $stpos -eq 0 \) -a \( $arg1 -ge $arg2 \) ]; then
        j=$arg1
        while [ $j -ge $arg2 ]; do
          if [ $j -eq 0 ]; then
            awkprstr="$awkprstr${dlm}\$(NF)"
          else
            awkprstr="$awkprstr${dlm}\$(NF-$j)"
          fi
          dlm=','
          j=$((j-1))
        done
      elif [ \( $stpos -ne 0 \) -a \( $arg1 -le $arg2 \) ]; then
        j=$arg1
        while [ $j -le $arg2 ]; do
          if [ $j -eq 0 ]; then
            awkprstr="$awkprstr${dlm}getsubf(\$(NF),$stpos,$edpos)"
          else
            awkprstr="$awkprstr${dlm}getsubf(\$(NF-$j),$stpos,$edpos)"
          fi
          dlm=','
          j=$((j+1))
        done
      elif [ \( $stpos -ne 0 \) -a \( $arg1 -ge $arg2 \) ]; then
        j=$arg1
        while [ $j -ge $arg2 ]; do
          if [ $j -eq 0 ]; then
            awkprstr="$awkprstr${dlm}getsubf(\$(NF),$stpos,$edpos)"
          else
            awkprstr="$awkprstr${dlm}getsubf(\$(NF-$j),$stpos,$edpos)"
          fi
          dlm=','
          j=$((j-1))
        done
      fi
    else
      if [ $stpos -eq 0 ]; then
        awkprstr="$awkprstr${dlm}getfldclstr1($arg1,$arg2)"
      else
        awkprstr="$awkprstr${dlm}getfldclstr2($arg1,$arg2,$stpos,$edpos)"
      fi
    fi
  fi
  # loop
  arg=''
  dlm=','
done
if [ -z "$awkprstr" ]; then
  print_usage_and_exit
fi
if [ \( -n "$arg" \) -a \( $i -eq $# \) -a \( $directmode -eq 0 \) ]; then
  file0=$arg
else
  file0=''
fi
if [ -z "$file0" ]; then
  file='-'
elif [ \( -f "$file0" \) -o \( -c "$file0" \) -o \( -p "$file0" \) -o \
       \( "_$file0" = '_-' \)                                         ]; then
  file="$file0"
else
  print_usage_and_exit
fi
if [ $directmode -ne 0 ]; then
  file=''
elif [ \( ! -r "$file" \) -a \( "_$file" != '_-' \) ]; then
  printf '%s\n' "${0##*/}: Cannot open the file" 1>&2
  exit 1
fi
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac

# select fields
awkcode='
BEGIN {
  _assert_exit = 0;
}

{
  print '"$awkprstr"';
}

END {
  if (_assert_exit) {
    print "'"${0##*/}"': Invalid string position for separating the field",
          "at line", NR > "/dev/stderr";
    exit _assert_exit;
  }
}

# return the substr in accordance with the counting rule of self command
function getsubf(str, startpos, len  ,i,p,l,l2,l3,st,ed) {
  # - "st" is a byte offset (start from 1) which the
  #   "startpos" suggests by the Japanese text position (zenkaku-hankaku;
  #   start from 1)
  # - "ed" is a byte offset + 1 (start from 1) which the
  #   "len" suggests by the Japanese text width (zenkaku-hankaku;
  #   start from 1; -1 means "to the end")
  st = 0;
  ed = 0;
  #
  # - "i" is a byte offset (start from 1) from which the function
  #   will read now
  # - "l" is a Japanese text position (zenkaku-hankaku; start
  #   from 1) of the letter which the function will read
  i = 1;
  p = 1;
  while (i <= length(str)) {
    if (st == 0) {
      if (startpos == p) {
        st = i;
        if (len == -1) {break;}
      } else if (startpos < p) {
        _assert_exit = 1;
        exit _assert_exit;
      }
    }
    l = substr(str, i, 1);
    if        (l < "\200") {i++; p++;
    } else if (l < "\300") {i++; # invalid UTF-8
    } else if (l < "\340") {i += 2; p += 2;
    } else if (l < "\360") {
      if (l == "\357") {
        l2 = substr(str, i+1, 1);
        if        (l2 == "\275") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\240") && (l3 < "\300")) {p += 1;
          } else                               {p += 2;}
        } else if (l2 == "\276") {
          l3 = substr(str, i+2, 1);
          if ((l3 >= "\200") && (l3 < "\240")) {p += 1;
          } else                               {p += 2;}
        } else                   {p += 2;               }
      } else           {p += 2;                          }
      i += 3;
    } else if (l < "\370") {i += 4; p += 2;
    } else if (l < "\374") {i += 5; p += 2;
    } else if (l < "\376") {i += 6; p += 2;
    } else                 {i++;                          } # invalidUTF-8
    if (st > 0) {
      if        ((startpos + len) == p) {ed = i ; break;
      } else if (len == 0)              {ed = st; break;
      } else if ((startpos + len) <  p) {_assert_exit = 1; exit _assert_exit;}
    }
  }
  if (st == 0) {_assert_exit = 1; exit _assert_exit;}
  return (ed == 0) ? substr(str,st) : substr(str,st,ed-st);
}
# generate the field cluster for the number and NF mixed arguments
# with no substr part (e.g. 1/NF, NF/1, 3/NF-3)
function getfldclstr1(fldnum1,fldnum2 ,i,str) {
  str = $fldnum1;
  if (fldnum1 <= fldnum2) {
    for (i=fldnum1+1;i<=fldnum2;i++) {
      str = str FS $i;
    }
  } else {
    for (i=fldnum1-1;i>=fldnum2;i--) {
      str = str FS $i;
    }
  }
  return str;
}
# generate the field cluster for the number and NF mixed arguments
# with a substr part (e.g. 1.1/NF, NF.3.6/1, 3.1.5/NF-3)
function getfldclstr2(fldnum1, fldnum2, stpos, len  ,i,str) {
  str = getsubf($fldnum1,stpos,len);
  if (fldnum1 <= fldnum2) {
    for (i=fldnum1+1;i<=fldnum2;i++) {
      str = str FS getsubf($i,stpos,len);
    }
  } else {
    for (i=fldnum1-1;i>=fldnum2;i--) {
      str = str FS getsubf($i,stpos,len);
    }
  }
  return str;
}
'
if [ $directmode -ne 0 ]; then
  printf '%s' "$directstr" | awk "$awkcode"
else
  exec awk "$awkcode" "$file"
fi
